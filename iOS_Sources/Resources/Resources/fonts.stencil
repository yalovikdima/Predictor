// swiftlint:disable all
// Generated using SwiftGen, by O.Halligon â€” https://github.com/SwiftGen/SwiftGen

{% if families %}
{% set accessModifier %}{% if param.publicAccess %}public{% else %}internal{% endif %}{% endset %}
#if os(OSX)
  import AppKit.NSFont
  {{accessModifier}} typealias Font = NSFont
#elseif os(iOS) || os(tvOS) || os(watchOS)
  import UIKit.UIFont
  {{accessModifier}} typealias Font = UIFont
#endif

// swiftlint:disable superfluous_disable_command
// swiftlint:disable file_length

// MARK: - Fonts

// swiftlint:disable identifier_name line_length type_body_length
{% macro transformPath path %}{% filter removeNewlines %}
  {% if param.preservePath %}
    {{path}}
  {% else %}
    {{path|basename}}
  {% endif %}
{% endfilter %}{% endmacro %}
{{accessModifier}} enum {{param.enumName|default:"FontFamily"}} {
  {% for family in families %}
    {% for font in family.fonts %}
    {{accessModifier}} static let {{font.path|swiftIdentifier|lowercase|escapeReservedKeywords|replace:"_otf",""|replace:"_ttf",""}} = FontConvertible(name: "{{font.name}}", family: "{{family.name}}", path: "{% call transformPath font.path %}")
    {% endfor %}
  {% endfor %}
  {{accessModifier}} static let allCustomFonts: [FontConvertible] = [
  {% for family in families %}
    {% for font in family.fonts %}
    {{font.path|swiftIdentifier|lowercase|escapeReservedKeywords|replace:"_otf",""|replace:"_ttf",""}},
    {% endfor %}
  {% endfor %}]
  {{accessModifier}} static func registerAllCustomFonts() {
    allCustomFonts.forEach { $0.register() }
  }
}
// swiftlint:enable identifier_name line_length type_body_length

// MARK: - Implementation Details

{{accessModifier}} struct FontConvertible {
  {{accessModifier}} let name: String
  {{accessModifier}} let family: String
  {{accessModifier}} let path: String

  {{accessModifier}} func font(size: CGFloat) -> Font! {
    return Font(font: self, size: size)
  }

  {{accessModifier}} func register() {
    // swiftlint:disable:next conditional_returns_on_newline
    guard let url = url else { return }
    CTFontManagerRegisterFontsForURL(url as CFURL, .process, nil)
  }

  fileprivate var url: URL? {
    return Fonts.defaultBundle.url(forResource: self.path, withExtension: nil)
  }
}

extension {{param.enumName|default:"FontFamily"}} {
  fileprivate static var defaultBundle: Bundle {
    #if BUNDLED_SDK
    let bundle = Bundle(for: BundleToken.self)
    #else
    let path = Bundle(for: BundleToken.self).path(forResource: "resource_bundle", ofType: "bundle") ?? ""
    let bundle = Bundle(path: path) ?? Bundle.main
    #endif

    return bundle
  }
}

{{accessModifier}} extension Font {
  convenience init!(font: FontConvertible, size: CGFloat) {
    #if os(iOS) || os(tvOS) || os(watchOS)
    if !UIFont.fontNames(forFamilyName: font.family).contains(font.name) {
      font.register()
    }
    #elseif os(OSX)
    if let url = font.url, CTFontManagerGetScopeForURL(url as CFURL) == .none {
      font.register()
    }
    #endif

    self.init(name: font.name, size: size)
  }
}

private final class BundleToken {}
{% else %}
// No fonts found
{% endif %}